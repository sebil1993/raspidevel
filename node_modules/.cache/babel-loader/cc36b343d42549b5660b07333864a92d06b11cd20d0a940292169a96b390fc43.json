{"ast":null,"code":"import json from \"../assets/SteamInventory.json\";\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  },\n  data() {\n    return {\n      //https://steamcommunity.com/inventory/76561198064626725/730/2?l=english&count=5000\n      items: json,\n      table: {\n        classId: null,\n        marketName: null,\n        quantity: null\n      }\n    };\n  },\n  methods: {\n    fetchUsers() {\n      this.$http.get(\"http://steamcommunity.com/inventory/76561198064626725/730/2?l=english&count=5000\").then(result => {\n        this.items = result.data;\n      });\n    },\n    getNameForClassID(classID) {\n      return this.handleDescriptions.find(e => e[1].classid == classID)[1].market_name;\n    }\n  },\n  computed: {\n    steamLink() {\n      return `http://api.steampowered.com/ISteamEconomy/GetPlayerItems/v0001/?key=${this.apiKEY}&steamid=${this.steamID}&appid=${this.appID}`;\n      // return `http://steamcommunity.com/inventory/${this.steamID}/${this.appID}/2?l=english&count=5000`\n    },\n\n    handleAssets() {\n      // return Object.keys(this.items);\n      return Object.entries(this.items.assets);\n    },\n    handleDescriptions() {\n      // return Object.keys(this.items);\n      return Object.entries(this.items.descriptions);\n    },\n    handleInventoryCount() {\n      return Object.entries(this.items.assets).length;\n    }\n  }\n};","map":{"version":3,"mappings":"AAgBA;AACA;EACAA;EACAC;IACAC;EACA;EACAC;IACA;MACA;MACAC;MACAC;QACAC;QACAC;QACAC;MACA;IACA;EACA;EACAC;IACAC;MACA,mGACAC;QACA;MACA;IACA;IACAC;MACA;IACA;EACA;EACAC;IACAC;MACA;MACA;IACA;;IACAC;MACA;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MACA;IACA;EACA;AACA","names":["name","props","msg","data","items","table","classId","marketName","quantity","methods","fetchUsers","then","getNameForClassID","computed","steamLink","handleAssets","handleDescriptions","handleInventoryCount"],"sourceRoot":"src/components","sources":["HelloWorld.vue"],"sourcesContent":["<template>\r\n  <div class=\"hello\">\r\n    <label>Vorhandene Items: {{ handleInventoryCount }}</label>\r\n    <!-- <div v-for=\"asset in handleAssets\" :key=\"asset\">{{ asset[0] + \" \" + asset[1].classid + \" \" + getNameForClassID(asset[1].classid)  }}<br></div> -->\r\n    <!-- <table>\r\n      <tr>\r\n        <th class=\"bg-green-500\" v-for=\"identifier in Object.keys(table)\" :key=\"identifier\">{{identifier}}</th>\r\n      </tr>\r\n    </table> -->\r\n    <h1 class=\"text-3xl font-bold underline border-2\">\r\n      Hello world!\r\n    </h1>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport json from \"../assets/SteamInventory.json\";\r\nexport default {\r\n  name: 'HelloWorld',\r\n  props: {\r\n    msg: String\r\n  },\r\n  data() {\r\n    return {\r\n      //https://steamcommunity.com/inventory/76561198064626725/730/2?l=english&count=5000\r\n      items: json,\r\n      table: {\r\n        classId: null,\r\n        marketName: null,\r\n        quantity: null\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    fetchUsers() {\r\n      this.$http.get(\"http://steamcommunity.com/inventory/76561198064626725/730/2?l=english&count=5000\")\r\n        .then((result) => {\r\n          this.items = result.data\r\n        })\r\n    },\r\n    getNameForClassID(classID) {\r\n      return this.handleDescriptions.find((e) => e[1].classid == classID)[1].market_name;\r\n    }\r\n  },\r\n  computed: {\r\n    steamLink() {\r\n      return `http://api.steampowered.com/ISteamEconomy/GetPlayerItems/v0001/?key=${this.apiKEY}&steamid=${this.steamID}&appid=${this.appID}`\r\n      // return `http://steamcommunity.com/inventory/${this.steamID}/${this.appID}/2?l=english&count=5000`\r\n    },\r\n    handleAssets() {\r\n      // return Object.keys(this.items);\r\n      return Object.entries(this.items.assets);\r\n    },\r\n    handleDescriptions() {\r\n      // return Object.keys(this.items);\r\n      return Object.entries(this.items.descriptions);\r\n    },\r\n    handleInventoryCount() {\r\n      return Object.entries(this.items.assets).length;\r\n    }\r\n  },\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<!-- <style scoped>\r\nh3 {\r\n  margin: 40px 0 0;\r\n}\r\n\r\nul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\n\r\nli {\r\n  display: inline-block;\r\n  margin: 0 10px;\r\n}\r\n\r\na {\r\n  color: #42b983;\r\n}\r\n</style> -->\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}